name: Manual Beta ISO Builder

on:
  workflow_dispatch: # Manual trigger

jobs:
  build-iso:
    runs-on: ubuntu-latest
    permissions:
      contents: write # Grant write permission for releases
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch full history for changelog generation

      - name: Build ISO in Docker (privileged)
        run: |
          docker run --rm --privileged -v "${{ github.workspace }}":/build -w /build archlinux:base /bin/bash -c "
            pacman -Sy --noconfirm archiso git &&
            git clone https://github.com/minhmc2007/Blue-Archive-Linux &&
            cd Blue-Archive-Linux/blue_archive_linux &&
            bash build.sh
          "

      - name: Copy ISO from build output
        run: |
          mkdir -p output
          cp -r Blue-Archive-Linux/blue_archive_linux/out/* output/ || echo 'No ISO output found'

      - name: Upload ISO Artifact
        uses: actions/upload-artifact@v4
        with:
          name: BlueArchiveLinux
          path: output/

      - name: Get ISO filename
        id: get_iso
        run: |
          ISO_FILE=$(ls output/*.iso | head -n 1 || echo "")
          if [ -z "$ISO_FILE" ]; then
            echo "No ISO file found in output/ directory. Skipping release upload."
            echo "iso_file=" >> $GITHUB_OUTPUT
            exit 0
          fi
          echo "iso_file=$ISO_FILE" >> $GITHUB_OUTPUT

      - name: Get previous release tag
        id: get_prev_tag
        run: |
          PREV_TAG=$(git tag --sort=-version:refname | grep -E '^nightly-build-' | head -n 1 || echo "")
          if [ -z "$PREV_TAG" ]; then
            echo "No previous tag found. Using first commit."
            FIRST_COMMIT=$(git rev-list --max-parents=0 HEAD)
            echo "prev_tag=$FIRST_COMMIT" >> $GITHUB_OUTPUT
          else
            echo "prev_tag=$PREV_TAG" >> $GITHUB_OUTPUT
          fi

      - name: Generate changelog
        id: changelog
        run: |
          if [ -z "${{ steps.get_prev_tag.outputs.prev_tag }}" ]; then
            CHANGELOG="Initial release"
          else
            CHANGELOG=$(git log ${{ steps.get_prev_tag.outputs.prev_tag }}..HEAD --oneline)
          fi
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Generate build information
        run: |
          echo "# 📋 Build Information" > build_info.md
          echo "- **Build Date**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> build_info.md
          echo "- **Workflow Run**: [${{ github.run_id }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> build_info.md
          echo "- **Commit**: [\`$(git rev-parse --short HEAD)\`](${{ github.server_url }}/${{ github.repository }}/commit/$(git rev-parse HEAD))" >> build_info.md
          echo "- **Branch**: ${{ github.ref_name }}" >> build_info.md
          echo "" >> build_info.md
          echo "### 📝 Changes Since Last Release" >> build_info.md
          echo "${{ steps.changelog.outputs.changelog }}" >> build_info.md

      - name: Create Release
        if: steps.get_iso.outputs.iso_file != ''
        uses: softprops/action-gh-release@v1
        with:
          tag_name: "nightly-build-${{ github.run_id }}"
          name: "Nightly Build ${{ github.run_id }}"
          body_path: build_info.md
          files: ${{ steps.get_iso.outputs.iso_file }}
          draft: false
          prerelease: true
